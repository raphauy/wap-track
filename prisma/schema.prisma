// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  GUEST
}

model User {
  id            String    @id @default(cuid())
  name          String?                             // gennext: show.column
  email         String    @unique                   // gennext: show.column
  emailVerified DateTime?                           // gennext: show.column
  image         String?
  role          Role      @default(GUEST)           // gennext: show.column
  accounts      Account[]                           // gennext: skip.list
  sessions      Session[]                           // gennext: skip.list
  otpConfirmations OTPSession[]                     // gennext: skip.list

  createdAt DateTime @default(now())                // gennext: skip.zod
  updatedAt DateTime @updatedAt                     // gennext: skip.zod show.column

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String?

  @@map("users")                                    // gennext: skip.list skip.zod
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

 
model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
  @@map("otp_codes")
}

model OTPSession {
  id String @id @default(cuid())

  tokenCheckExpiration DateTime?              // gennext: show.column
  deviceBrowser String?                       // gennext: show.column
  deviceOs String?                            // gennext: show.column
  ipAddress String?                           // gennext: show.column
  city String?                                // gennext: show.column
  country String?                             // gennext: show.column

  createdAt DateTime @default(now())          // gennext: show.column skip.zod
  updatedAt DateTime @updatedAt               // gennext: show.column skip.zod

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_sessions")                       // gennext: skip.list
}

model Client {
  id                    String   @id @default(cuid())
  name                  String                   // gennext: show.column
  slug                  String   @unique         // gennext: show.column

  createdAt             DateTime @default(now()) // gennext: show.column skip.zod
  updatedAt             DateTime @updatedAt      // gennext: skip.zod

  users                 User[]                   // gennext: skip.list
  whatsappInstance      WhatsappInstance?
  contacts              Contact[]
  groups                Group[]
}

model WhatsappInstance {
  id                    String @id @default(cuid())
  externalId            String @unique           // gennext: show.column
  name                  String                   // gennext: show.column

  chatwootAccountId     Int?                     // gennext: show.column
  chatwootUrl           String?                  // gennext: show.column
  chatwootAccessToken   String?                  // gennext: show.column

  whatsappInboxId       String?                  // gennext: show.column

  createdAt             DateTime @default(now()) // gennext: show.column skip.zod
  updatedAt             DateTime @updatedAt      // gennext: skip.zod

  client                Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId              String @unique
}

model Contact {
  id            String      @id @default(cuid())
  chatwootId    String?
  name          String                                      // gennext: show.column
  phone         String @unique                              // gennext: show.column
  imageUrl      String?                                     // gennext: show.column

  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  createdAt     DateTime    @default(now())                 // gennext: skip.zod
  updatedAt     DateTime    @updatedAt                      // gennext: skip.zod

  groups        GroupContact[]

  @@unique([clientId, chatwootId])
}

model Message {
  id                String      @id @default(cuid())
  role              String
  content           String
  gptData           String?

  tokens            Int       @default(0)

  name              String?     @default("")                    // gennext: skip.zod show.column
  toolInvocations   String?     

  createdAt         DateTime    @default(now())                 // gennext: skip.zod
  updatedAt         DateTime    @updatedAt                      // gennext: skip.zod

  group             Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String
}

model Config {
  id                String       @id @default(cuid())
  name              String       @unique
  value             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt  
}

model PromptVersion {
  id                  String       @id @default(cuid())
  content             String
  timestamp           DateTime     @default(now())
  user                String

  app                 App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId               String
}

model App {
  id                String    @id @default(cuid())
  name              String                               // gennext: show.column
  prompt            String?                              // gennext: show.column

  createdAt         DateTime @default(now())             // gennext: skip.zod
  updatedAt         DateTime @updatedAt                  // gennext: skip.zod show.column

  promptVersions    PromptVersion[]
  groups            Group[]                              // gennext: skip.list
}

model Group {
  id                String   @id @default(cuid())
  chatwootConversationId Int                               // gennext: show.column
  name              String                                 // gennext: show.column
  messages          Message[]                              // gennext: skip.list

  app               App? @relation(fields: [appId], references: [id], onDelete: SetNull)
  appId             String?

  createdAt         DateTime    @default(now())                 // gennext: skip.zod
  updatedAt         DateTime    @updatedAt                      // gennext: skip.zod

  client            Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          String

  contacts          GroupContact[]

  @@unique([clientId, chatwootConversationId])
}

model GroupContact {
  group             Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String

  contact           Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId         String

  createdAt         DateTime    @default(now())                 // gennext: skip.zod
  updatedAt         DateTime    @updatedAt                      // gennext: skip.zod

  @@id([groupId, contactId])
  @@unique([groupId, contactId])
}